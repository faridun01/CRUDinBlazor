@page "/products/details"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<CRUDinBlazor.Data.CRUDinBlazorContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Product Details</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg p-4">
                <h2 class="text-center text-primary"><i class="bi bi-box"></i> Product Details</h2>
                <hr />

                @if (product is null)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3"><em>Loading product details...</em></p>
                    </div>
                }
                else
                {
                    <dl class="row">
                        <dt class="col-sm-4 fw-bold">Product Name:</dt>
                        <dd class="col-sm-8">@product.Name</dd>

                        <dt class="col-sm-4 fw-bold">Price:</dt>
                        <dd class="col-sm-8">$@product.Price</dd>

                        <dt class="col-sm-4 fw-bold">Stock Quantity:</dt>
                        <dd class="col-sm-8">@product.Quantity</dd>
                    </dl>

                    <!-- Action Buttons -->
                    <div class="d-flex justify-content-between mt-4">
                        <a href="@($"/products/edit?id={product.Id}")" class="btn btn-warning">
                            <i class="bi bi-pencil-square"></i> Edit
                        </a>
                        <a href="/products" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> Back to List
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.Id == Id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
